public Label[,] drawNotes(int disType, string[][] scale, List<string> tuning, int exception, int strings)
{
    Label[,] labelArray = new Label[13, strings];
    for (int i = 0; i < strings; i++)
    {
        int num2 = this.shiftIndex(i, disType);
        int num3 = this.shiftIndex(i, 1);
        for (int j = 0; j < 13; j++)
        {
            Label label = new Label {
                Location = new Point((80 * j) + 10, (-40 + (50 * strings)) - (50 * i)),
                TextAlign = ContentAlignment.MiddleCenter,
                Font = new Font("Verdana", 17f),
                Width = 50,
                Height = 50
            };
            if ((j + num3) >= scale[1].Length)
            {
                label.Tag = scale[1][(j + num3) - scale[1].Length];
            }
            else
            {
                label.Tag = scale[1][j + num3];
            }
            if ((j + num2) >= scale[disType].Length)
            {
                label.Text = scale[disType][(j + num2) - scale[disType].Length];
            }
            else
            {
                label.Text = scale[disType][j + num2];
            }
            GraphicsPath path = new GraphicsPath();
            path.AddEllipse(0, 0, label.Width, label.Height);
            label.Region = new Region(path);
            for (int k = 0; k < this.mScales[exception].Length; k++)
            {
                if (this.mScales[exception].Contains<object>(label.Tag))
                {
                    label.BackColor = Color.FromArgb(250, 0xff, 0x7e, 0x6b);
                }
                else
                {
                    label.BackColor = Color.FromArgb(250, 0x87, 0xf1, 0xff);
                }
            }
            base.Controls.Add(label);
            labelArray[j, i] = label;
        }
    }
    return labelArray;
}

